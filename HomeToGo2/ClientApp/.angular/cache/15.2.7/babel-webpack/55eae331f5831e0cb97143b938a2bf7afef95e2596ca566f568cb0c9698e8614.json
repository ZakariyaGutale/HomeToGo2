{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    const currentUser = this.authService.currentUserValue;\n    // Check if there is a current user logged in\n    if (currentUser) {\n      // If a user is logged in, allow access to the route\n      return true;\n    }\n    // If no user is logged in, redirect to the login page and pass the return URL\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false; // Deny access to the route\n  }\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAKA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAW;EAEvEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACnE,MAAMC,WAAW,GAAG,IAAI,CAACL,WAAW,CAACM,gBAAgB;IACrD;IACA,IAAID,WAAW,EAAE;MACf;MACA,OAAO,IAAI;;IAGb;IACA,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEL,KAAK,CAACM;MAAG;IAAE,CAAE,CAAC;IAC3E,OAAO,KAAK,CAAC,CAAC;EAChB;;;AAfWZ,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAa,SAATb,SAAS;EAAAc,YADI;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","currentUser","currentUserValue","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/Authentication/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const currentUser = this.authService.currentUserValue;\n    // Check if there is a current user logged in\n    if (currentUser) {\n      // If a user is logged in, allow access to the route\n      return true;\n    }\n\n    // If no user is logged in, redirect to the login page and pass the return URL\n    this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n    return false; // Deny access to the route\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}