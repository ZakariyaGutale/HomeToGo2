{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ListingsComponent = class ListingsComponent {\n  constructor(_router, _listingService) {\n    this._router = _router;\n    this._listingService = _listingService;\n    this.viewTitle = 'Table';\n    this.displayImage = true;\n    this.listings = [];\n    this._listFilter = '';\n    this.filteredListings = this.listings;\n  }\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    console.log('In setter:', value);\n    this.filteredListings = this.performFilter(value);\n  }\n  getListings() {\n    this._listingService.getListings().subscribe(data => {\n      console.log('All', JSON.stringify(data));\n      this.listings = data;\n      this.filteredListings = this.listings;\n    });\n  }\n  performFilter(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.listings.filter(listing => listing.Title.toLocaleLowerCase().includes(filterBy));\n  }\n  deleteListing(listing) {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${listing.Title}\"?`);\n    if (confirmDelete) {\n      this._listingService.deleteListing(listing.ListingId).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this.filteredListings = this.filteredListings.filter(i => i !== listing);\n        }\n      }, error => {\n        console.error('Error deleting listing:', error);\n      });\n    }\n  }\n  toggleImage() {\n    this.displayImage = !this.displayImage;\n  }\n  navigateToListingForm() {\n    this._router.navigate(['/listingform']);\n  }\n  ngOnInit() {\n    this.getListings();\n  }\n};\nListingsComponent = __decorate([Component({\n  selector: 'app-listings-component',\n  templateUrl: './listings.component.html',\n  styleUrls: ['./listings.component.css']\n})], ListingsComponent);\nexport { ListingsComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,QAAgB,eAAe;AAY1C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAK5BC,YAAoBC,OAAe,EAAUC,eAA+B;IAAxD,YAAO,GAAPD,OAAO;IAAkB,oBAAe,GAAfC,eAAe;IAJ5D,cAAS,GAAW,OAAO;IAC3B,iBAAY,GAAY,IAAI;IAC5B,aAAQ,GAAe,EAAE;IAIjB,gBAAW,GAAW,EAAE;IAqBhC,qBAAgB,GAAe,IAAI,CAACC,QAAQ;EAvBoC;EAGhF,IAAIC,UAAU;IACZ,OAAO,IAAI,CAACC,WAAW;EACzB;EACA,IAAID,UAAU,CAACE,KAAa;IAC1B,IAAI,CAACD,WAAW,GAAGC,KAAK;IACxBC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;IAChC,IAAI,CAACG,gBAAgB,GAAG,IAAI,CAACC,aAAa,CAACJ,KAAK,CAAC;EACnD;EAEAK,WAAW;IACT,IAAI,CAACT,eAAe,CAACS,WAAW,EAAE,CAC/BC,SAAS,CAAEC,IAAgB,IAAI;MAC9BN,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEM,IAAI,CAACC,SAAS,CAACF,IAAI,CAAC,CAAC;MACxC,IAAI,CAACV,QAAQ,GAAGU,IAAI;MACpB,IAAI,CAACJ,gBAAgB,GAAG,IAAI,CAACN,QAAQ;IACvC,CAAC,CACA;EACL;EAKAO,aAAa,CAACM,QAAgB;IAC5BA,QAAQ,GAAGA,QAAQ,CAACC,iBAAiB,EAAE;IACvC,OAAO,IAAI,CAACd,QAAQ,CAACe,MAAM,CAAEC,OAAiB,IAC5CA,OAAO,CAACC,KAAK,CAACH,iBAAiB,EAAE,CAACI,QAAQ,CAACL,QAAQ,CAAC,CAAC;EACzD;EAEAM,aAAa,CAACH,OAAiB;IAC7B,MAAMI,aAAa,GAAGC,OAAO,CAAC,oCAAoCL,OAAO,CAACC,KAAK,IAAI,CAAC;IACpF,IAAIG,aAAa,EAAE;MACjB,IAAI,CAACrB,eAAe,CAACoB,aAAa,CAACH,OAAO,CAACM,SAAS,CAAC,CAClDb,SAAS,CACPc,QAAQ,IAAI;QACX,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBpB,OAAO,CAACC,GAAG,CAACkB,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACnB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACS,MAAM,CAACW,CAAC,IAAIA,CAAC,KAAKV,OAAO,CAAC;;MAE5E,CAAC,EACAW,KAAK,IAAI;QACRvB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CAAC;;EAEV;EAECC,WAAW;IACV,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACvC;EAEDC,qBAAqB;IACnB,IAAI,CAAChC,OAAO,CAACiC,QAAQ,CAAC,CAAC,cAAc,CAAC,CAAC;EACzC;EAEAC,QAAQ;IACN,IAAI,CAACxB,WAAW,EAAE;EACpB;CACD;AAhEYZ,iBAAiB,eAN7BD,SAAS,CAAC;EACTsC,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B;CACvC,CAAC,GAEWvC,iBAAiB,CAgE7B;SAhEYA,iBAAiB","names":["Component","ListingsComponent","constructor","_router","_listingService","listings","listFilter","_listFilter","value","console","log","filteredListings","performFilter","getListings","subscribe","data","JSON","stringify","filterBy","toLocaleLowerCase","filter","listing","Title","includes","deleteListing","confirmDelete","confirm","ListingId","response","success","message","i","error","toggleImage","displayImage","navigateToListingForm","navigate","ngOnInit","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/ibrahim/Projects/HomeToGo2/HomeToGo2/HomeToGo2/ClientApp/src/app/listings/listings.component.ts"],"sourcesContent":["\nimport { Component, OnInit } from '@angular/core';\nimport { IListing } from './listing';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { ListingService } from './listings.service';\n\n@Component({\n  selector: 'app-listings-component',\n  templateUrl: './listings.component.html',\n  styleUrls: ['./listings.component.css']\n})\n\nexport class ListingsComponent {\n  viewTitle: String = 'Table';\n  displayImage: boolean = true;\n  listings: IListing[] = [];\n\n  constructor(private _router: Router, private _listingService: ListingService) { }\n\n  private _listFilter: string = '';\n  get listFilter(): string {\n    return this._listFilter;\n  }\n  set listFilter(value: string) {\n    this._listFilter = value;\n    console.log('In setter:', value);\n    this.filteredListings = this.performFilter(value);\n  }\n\n  getListings(): void {\n    this._listingService.getListings()\n      .subscribe((data: IListing[]) => {  // Explicitly declare data as type IListing[]\n        console.log('All', JSON.stringify(data));\n        this.listings = data;\n        this.filteredListings = this.listings;\n      }\n      );\n  }\n\n\n  filteredListings: IListing[] = this.listings;\n\n  performFilter(filterBy: string): IListing[] {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.listings.filter((listing: IListing) =>\n      listing.Title.toLocaleLowerCase().includes(filterBy))\n  }\n\n  deleteListing(listing: IListing): void {\n    const confirmDelete = confirm(`Are you sure you want to delete \"${listing.Title}\"?`);\n    if (confirmDelete) {\n      this._listingService.deleteListing(listing.ListingId)\n        .subscribe(\n          (response) => {\n            if (response.success) {\n              console.log(response.message);\n              this.filteredListings = this.filteredListings.filter(i => i !== listing);\n            }\n          },\n          (error) => {\n            console.error('Error deleting listing:', error);\n          });\n    }\n  }\n\n   toggleImage(): void {\n    this.displayImage = !this.displayImage;\n   }\n\n  navigateToListingForm() {\n    this._router.navigate(['/listingform']);\n  }\n\n  ngOnInit(): void {\n    this.getListings();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}