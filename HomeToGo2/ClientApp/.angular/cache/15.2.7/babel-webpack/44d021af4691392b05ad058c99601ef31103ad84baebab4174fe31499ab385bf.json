{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Injectable decorator to define this class as a service that can be injected\nexport class ReservationService {\n  // Constructor to inject the HttpClient service for making HTTP requests\n  constructor(http) {\n    this.http = http;\n    // Base URL for the reservation API\n    this.baseUrl = 'api/reservation';\n  }\n  // Method to get all reservations from the server\n  getReservations() {\n    // Uses HttpClient to send a GET request to the specified URL\n    return this.http.get(this.baseUrl);\n  }\n  // Method to create a new reservation\n  createReservation(reservation) {\n    // Specific URL for creating a reservation\n    const createUrl = 'api/reservation/createReservation';\n    // Uses HttpClient to send a POST request with the reservation data\n    return this.http.post(createUrl, reservation);\n  }\n  // Method to delete a reservation by its ID\n  deleteReservation(id) {\n    // Uses HttpClient to send a DELETE request to the URL with the reservation ID\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  //method to check if the dates overlaps\n  checkOverlap(reservation) {\n    const url = `${this.baseUrl}/checkOverlap`;\n    return this.http.post(url, reservation);\n  }\n}\nReservationService.ɵfac = function ReservationService_Factory(t) {\n  return new (t || ReservationService)(i0.ɵɵinject(i1.HttpClient));\n};\nReservationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReservationService,\n  factory: ReservationService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA;AAIA,OAAM,MAAOA,kBAAkB;EAI7B;EACAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJxB;IACQ,YAAO,GAAG,iBAAiB;EAGK;EAExC;EACAC,eAAe;IACb;IACA,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAiB,IAAI,CAACC,OAAO,CAAC;EACpD;EAEA;EACAC,iBAAiB,CAACC,WAAyB;IACzC;IACA,MAAMC,SAAS,GAAG,mCAAmC;IACrD;IACA,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAMD,SAAS,EAAED,WAAW,CAAC;EACpD;EAEA;EACAG,iBAAiB,CAACC,EAAU;IAC1B;IACA,OAAO,IAAI,CAACT,IAAI,CAACU,MAAM,CAAM,GAAG,IAAI,CAACP,OAAO,IAAIM,EAAE,EAAE,CAAC;EACvD;EAEA;EACAE,YAAY,CAACN,WAAkC;IAC7C,MAAMO,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,eAAe;IAC1C,OAAO,IAAI,CAACH,IAAI,CAACO,IAAI,CAAUK,GAAG,EAAEP,WAAW,CAAC;EAClD;;AA/BWP,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAe,SAAlBf,kBAAkB;EAAAgB,YAFjB;AAAM","names":["ReservationService","constructor","http","getReservations","get","baseUrl","createReservation","reservation","createUrl","post","deleteReservation","id","delete","checkOverlap","url","factory","providedIn"],"sourceRoot":"","sources":["/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/reservations/reservations.service.ts"],"sourcesContent":["// Importing necessary Angular modules and interfaces\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IReservation } from './reservation';\n\n// Injectable decorator to define this class as a service that can be injected\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReservationService {\n  // Base URL for the reservation API\n  private baseUrl = 'api/reservation';\n\n  // Constructor to inject the HttpClient service for making HTTP requests\n  constructor(private http: HttpClient) { }\n\n  // Method to get all reservations from the server\n  getReservations(): Observable<IReservation[]> {\n    // Uses HttpClient to send a GET request to the specified URL\n    return this.http.get<IReservation[]>(this.baseUrl);\n  }\n\n  // Method to create a new reservation\n  createReservation(reservation: IReservation): Observable<any> {\n    // Specific URL for creating a reservation\n    const createUrl = 'api/reservation/createReservation'\n    // Uses HttpClient to send a POST request with the reservation data\n    return this.http.post<any>(createUrl, reservation);\n  }\n\n  // Method to delete a reservation by its ID\n  deleteReservation(id: number): Observable<any> {\n    // Uses HttpClient to send a DELETE request to the URL with the reservation ID\n    return this.http.delete<any>(`${this.baseUrl}/${id}`);\n  }\n\n  //method to check if the dates overlaps\n  checkOverlap(reservation: Partial<IReservation>): Observable<boolean> {\n    const url = `${this.baseUrl}/checkOverlap`;\n    return this.http.post<boolean>(url, reservation);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}