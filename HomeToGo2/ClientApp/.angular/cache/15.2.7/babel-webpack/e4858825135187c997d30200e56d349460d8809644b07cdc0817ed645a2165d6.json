{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    const currentUserData = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject(currentUserData ? JSON.parse(currentUserData) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  login(username, password) {\n    return this.http.post(`/api/account/login`, {\n      username,\n      password\n    }).pipe(map(user => {\n      // Extract name from the token if it's included there\n      const decodedToken = decodeToken(user.token);\n      const name = decodedToken.name; // Adjust based on actual token structure\n      localStorage.setItem('currentUser', JSON.stringify({\n        ...user,\n        name\n      }));\n      this.currentUserSubject.next({\n        ...user,\n        name\n      });\n      return user;\n    }));\n  }\n  register(email, username, name, password) {\n    return this.http.post(`/api/account/register`, {\n      email,\n      username,\n      name,\n      password\n    }).pipe(map(response => {\n      return response; // Directly return the response object\n    }));\n  }\n\n  logout() {\n    // Remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAC3D,IAAI,CAACC,kBAAkB,GAAG,IAAIR,eAAe,CAAMK,eAAe,GAAGI,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,GAAG,IAAI,CAAC;IACxG,IAAI,CAACM,WAAW,GAAG,IAAI,CAACH,kBAAkB,CAACI,YAAY,EAAE;EAC3D;EAGA,IAAWC,gBAAgB;IACzB,OAAO,IAAI,CAACL,kBAAkB,CAACM,KAAK;EACtC;EAEAC,KAAK,CAACC,QAAgB,EAAEC,QAAgB;IACtC,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,oBAAoB,EAAE;MAAEF,QAAQ;MAAEC;IAAQ,CAAE,CAAC,CACrEE,IAAI,CAAClB,GAAG,CAACmB,IAAI,IAAG;MACf;MACA,MAAMC,YAAY,GAAGC,WAAW,CAACF,IAAI,CAACG,KAAK,CAAC;MAC5C,MAAMC,IAAI,GAAGH,YAAY,CAACG,IAAI,CAAC,CAAC;MAEhClB,YAAY,CAACmB,OAAO,CAAC,aAAa,EAAEhB,IAAI,CAACiB,SAAS,CAAC;QAAE,GAAGN,IAAI;QAAEI;MAAI,CAAE,CAAC,CAAC;MACtE,IAAI,CAAChB,kBAAkB,CAACmB,IAAI,CAAC;QAAE,GAAGP,IAAI;QAAEI;MAAI,CAAE,CAAC;MAC/C,OAAOJ,IAAI;IACb,CAAC,CAAC,CAAC;EACP;EAIAQ,QAAQ,CAACC,KAAa,EAAEb,QAAgB,EAAEQ,IAAY,EAAEP,QAAgB;IACtE,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAM,uBAAuB,EAAE;MAAEW,KAAK;MAAEb,QAAQ;MAAEQ,IAAI;MAAEP;IAAQ,CAAE,CAAC,CACrFE,IAAI,CAAClB,GAAG,CAAC6B,QAAQ,IAAG;MACnB,OAAOA,QAAQ,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;EACP;;EAEAC,MAAM;IACJ;IACAzB,YAAY,CAAC0B,UAAU,CAAC,aAAa,CAAC;IACtC,IAAI,CAACxB,kBAAkB,CAACmB,IAAI,CAAC,IAAI,CAAC;EACpC;;AAzCWzB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YADE;AAAM","names":["BehaviorSubject","map","AuthService","constructor","http","currentUserData","localStorage","getItem","currentUserSubject","JSON","parse","currentUser","asObservable","currentUserValue","value","login","username","password","post","pipe","user","decodedToken","decodeToken","token","name","setItem","stringify","next","register","email","response","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/Authentication/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<any>;\n  public currentUser: Observable<any>;\n\n  constructor(private http: HttpClient) {\n    const currentUserData = localStorage.getItem('currentUser');\n    this.currentUserSubject = new BehaviorSubject<any>(currentUserData ? JSON.parse(currentUserData) : null);\n    this.currentUser = this.currentUserSubject.asObservable();\n  }\n\n\n  public get currentUserValue(): any {\n    return this.currentUserSubject.value;\n  }\n\n  login(username: string, password: string) {\n    return this.http.post<any>(`/api/account/login`, { username, password })\n      .pipe(map(user => {\n        // Extract name from the token if it's included there\n        const decodedToken = decodeToken(user.token);\n        const name = decodedToken.name; // Adjust based on actual token structure\n\n        localStorage.setItem('currentUser', JSON.stringify({ ...user, name }));\n        this.currentUserSubject.next({ ...user, name });\n        return user;\n      }));\n  }\n\n\n\n  register(email: string, username: string, name: string, password: string): Observable<any> {\n    return this.http.post<any>(`/api/account/register`, { email, username, name, password })\n      .pipe(map(response => {\n        return response; // Directly return the response object\n      }));\n  }\n\n  logout() {\n    // Remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    this.currentUserSubject.next(null);\n  }\n\n  // Additional methods for registration, etc.\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}