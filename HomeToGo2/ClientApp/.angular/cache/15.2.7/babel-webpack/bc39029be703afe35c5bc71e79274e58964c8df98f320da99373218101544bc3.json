{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./reservations.service\";\nimport * as i4 from \"../listings/listings.service\";\nimport * as i5 from \"@angular/common\";\nfunction ReservationFormComponent_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const listing_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", listing_r1.ListingId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", listing_r1.Title, \" \");\n  }\n}\nexport class ReservationFormComponent {\n  constructor(formBuilder, router, reservationService, listingService) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.reservationService = reservationService;\n    this.listingService = listingService;\n    this.listings = [];\n    this.reservationForm = this.formBuilder.group({\n      ListingId: ['', Validators.required],\n      CheckInDate: ['', Validators.required],\n      CheckOutDate: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.loadListings();\n  }\n  loadListings() {\n    this.listingService.getListings().subscribe(listings => this.listings = listings, error => console.error('Error loading listings:', error));\n  }\n  onSubmit() {\n    if (this.reservationForm.valid) {\n      const newReservation = {\n        ...this.reservationForm.value,\n        ReservationDate: new Date(),\n        TotalPrice: 0 // Server will calculate the total price\n      };\n\n      this.reservationService.createReservation(newReservation).subscribe(response => {\n        console.log('Reservation created:', response);\n        this.router.navigate(['/reservations']);\n      }, error => console.error('Reservation creation failed:', error));\n    } else {\n      console.error('Form is not valid');\n    }\n  }\n  backToReservations() {\n    this.router.navigate(['/reservations']);\n  }\n}\nReservationFormComponent.ɵfac = function ReservationFormComponent_Factory(t) {\n  return new (t || ReservationFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ReservationService), i0.ɵɵdirectiveInject(i4.ListingService));\n};\nReservationFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ReservationFormComponent,\n  selectors: [[\"app-reservation-form\"]],\n  decls: 28,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"listingId\"], [1, \"text-danger\"], [\"id\", \"listingId\", \"formControlName\", \"ListingId\", 1, \"form-control\"], [\"value\", \"\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"checkInDate\"], [\"type\", \"date\", \"id\", \"checkInDate\", \"formControlName\", \"CheckInDate\", 1, \"form-control\"], [\"for\", \"checkOutDate\"], [\"type\", \"date\", \"id\", \"checkOutDate\", \"formControlName\", \"CheckOutDate\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [3, \"ngValue\"]],\n  template: function ReservationFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Create New Reservation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function ReservationFormComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n      i0.ɵɵtext(5, \"Listings:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"span\", 3);\n      i0.ɵɵtext(7, \"*\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"select\", 4)(9, \"option\", 5);\n      i0.ɵɵtext(10, \"Select a listing...\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, ReservationFormComponent_option_11_Template, 2, 2, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 1)(13, \"label\", 7);\n      i0.ɵɵtext(14, \"Check-In Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"span\", 3);\n      i0.ɵɵtext(16, \"*\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 1)(19, \"label\", 9);\n      i0.ɵɵtext(20, \"Check-Out Date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"span\", 3);\n      i0.ɵɵtext(22, \"*\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(23, \"input\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"button\", 11);\n      i0.ɵɵtext(25, \"Create Reservation\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(26, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function ReservationFormComponent_Template_button_click_26_listener() {\n        return ctx.backToReservations();\n      });\n      i0.ɵɵtext(27, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.reservationForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.listings);\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"disabled\", ctx.reservationForm.invalid);\n    }\n  },\n  dependencies: [i5.NgForOf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","ReservationFormComponent","constructor","formBuilder","router","reservationService","listingService","reservationForm","group","ListingId","required","CheckInDate","CheckOutDate","ngOnInit","loadListings","getListings","subscribe","listings","error","console","onSubmit","valid","newReservation","value","ReservationDate","Date","TotalPrice","createReservation","response","log","navigate","backToReservations","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/ibrahim/Projects/HomeToGo2/HomeToGo2/HomeToGo2/ClientApp/src/app/reservations/reservationform.component.ts","/Users/ibrahim/Projects/HomeToGo2/HomeToGo2/HomeToGo2/ClientApp/src/app/reservations/reservationform.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ReservationService } from './reservations.service';\nimport { IListing } from '../listings/listing';\nimport { ListingService } from '../listings/listings.service';\nimport { IReservation } from './reservation';\n\n@Component({\n  selector: \"app-reservation-form\",\n  templateUrl: \"./reservationform.component.html\"\n})\nexport class ReservationFormComponent implements OnInit {\n  reservationForm: FormGroup;\n  listings: IListing[] = [];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private reservationService: ReservationService,\n    private listingService: ListingService\n  ) {\n    this.reservationForm = this.formBuilder.group({\n      ListingId: ['', Validators.required],\n      CheckInDate: ['', Validators.required],\n      CheckOutDate: ['', Validators.required],\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadListings();\n  }\n\n  loadListings(): void {\n    this.listingService.getListings().subscribe(\n      listings => this.listings = listings,\n      error => console.error('Error loading listings:', error)\n    );\n  }\n\n  onSubmit(): void {\n    if (this.reservationForm.valid) {\n      const newReservation: IReservation = {\n        ...this.reservationForm.value,\n        ReservationDate: new Date(), // Server will set the reservation date\n        TotalPrice: 0 // Server will calculate the total price\n      };\n\n      this.reservationService.createReservation(newReservation).subscribe(\n        response => {\n          console.log('Reservation created:', response);\n          this.router.navigate(['/reservations']);\n        },\n        error => console.error('Reservation creation failed:', error)\n      );\n    } else {\n      console.error('Form is not valid');\n    }\n  }\n\n  backToReservations(): void {\n    this.router.navigate(['/reservations']);\n  }\n}\n","<h2>Create New Reservation</h2>\n\n<form [formGroup]=\"reservationForm\" (ngSubmit)=\"onSubmit()\">\n  <!-- Listing ID Dropdown -->\n  <div class=\"form-group\">\n    <label for=\"listingId\">Listings:</label><span class=\"text-danger\">*</span>\n    <select id=\"listingId\" formControlName=\"ListingId\" class=\"form-control\">\n      <option value=\"\">Select a listing...</option>\n      <option *ngFor=\"let listing of listings\" [ngValue]=\"listing.ListingId\">\n        {{ listing.Title }}\n      </option>\n    </select>\n  </div>\n\n  <!-- Check-In Date -->\n  <div class=\"form-group\">\n    <label for=\"checkInDate\">Check-In Date:</label><span class=\"text-danger\">*</span>\n    <input type=\"date\" id=\"checkInDate\" formControlName=\"CheckInDate\" class=\"form-control\"  />\n  </div>\n\n  <!-- Check-Out Date -->\n  <div class=\"form-group\">\n    <label for=\"checkOutDate\">Check-Out Date:</label><span class=\"text-danger\">*</span>\n    <input type=\"date\" id=\"checkOutDate\" formControlName=\"CheckOutDate\" class=\"form-control\" />\n  </div>\n\n  <!-- Submission Buttons -->\n  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"reservationForm.invalid\">Create Reservation</button>\n  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"backToReservations()\">Cancel</button>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}