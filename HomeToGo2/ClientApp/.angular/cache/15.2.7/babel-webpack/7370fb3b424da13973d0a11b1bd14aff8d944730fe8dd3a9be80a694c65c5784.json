{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Authentication/auth.service\";\nexport class NavMenuComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.isExpanded = false;\n    this.isAuthenticated = false;\n    this.name = '';\n    this.authSubscription = this.authService.currentUser.subscribe(user => {\n      this.isAuthenticated = !!user;\n      this.name = user ? user.email : ''; // Assuming the email is the username\n    });\n  }\n\n  ngOnDestroy() {\n    this.authSubscription.unsubscribe();\n  }\n  collapse() {\n    this.isExpanded = false;\n  }\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n  logout() {\n    if (window.confirm('Are you sure you want to log out?')) {\n      this.authService.logout();\n      // Additional logic after logging out if necessary\n    }\n  }\n}\n\nNavMenuComponent.ɵfac = function NavMenuComponent_Factory(t) {\n  return new (t || NavMenuComponent)(i0.ɵɵdirectiveInject(i1.AuthService));\n};\nNavMenuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: NavMenuComponent,\n  selectors: [[\"app-nav-menu\"]],\n  decls: 1,\n  vars: 0,\n  template: function NavMenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"c\\n\");\n    }\n  },\n  styles: [\"a.navbar-brand[_ngcontent-%COMP%] {\\n  white-space: normal;\\n  text-align: center;\\n  word-break: break-all;\\n}\\n\\nhtml[_ngcontent-%COMP%] {\\n  font-size: 14px;\\n}\\n@media (min-width: 768px) {\\n  html[_ngcontent-%COMP%] {\\n    font-size: 16px;\\n  }\\n}\\n\\n.box-shadow[_ngcontent-%COMP%] {\\n  box-shadow: 0 .25rem .75rem rgba(0, 0, 0, .05);\\n}\\n\\n.nav-sections[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  width: 100%;\\n}\\n\\n.nav-left[_ngcontent-%COMP%] {\\n  \\n}\\n\\n.nav-right[_ngcontent-%COMP%] {\\n  \\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbmF2LW1lbnUvbmF2LW1lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjtBQUNBO0VBQ0U7SUFDRSxlQUFlO0VBQ2pCO0FBQ0Y7O0FBRUE7RUFDRSw4Q0FBOEM7QUFDaEQ7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsOEJBQThCO0VBQzlCLG1CQUFtQjtFQUNuQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSwyQ0FBMkM7QUFDN0M7O0FBRUE7RUFDRSwyQ0FBMkM7QUFDN0MiLCJzb3VyY2VzQ29udGVudCI6WyJhLm5hdmJhci1icmFuZCB7XG4gIHdoaXRlLXNwYWNlOiBub3JtYWw7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd29yZC1icmVhazogYnJlYWstYWxsO1xufVxuXG5odG1sIHtcbiAgZm9udC1zaXplOiAxNHB4O1xufVxuQG1lZGlhIChtaW4td2lkdGg6IDc2OHB4KSB7XG4gIGh0bWwge1xuICAgIGZvbnQtc2l6ZTogMTZweDtcbiAgfVxufVxuXG4uYm94LXNoYWRvdyB7XG4gIGJveC1zaGFkb3c6IDAgLjI1cmVtIC43NXJlbSByZ2JhKDAsIDAsIDAsIC4wNSk7XG59XG5cbi5uYXYtc2VjdGlvbnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4ubmF2LWxlZnQge1xuICAvKiBBZGp1c3QgYWNjb3JkaW5nIHRvIHlvdXIgc3R5bGluZyBuZWVkcyAqL1xufVxuXG4ubmF2LXJpZ2h0IHtcbiAgLyogQWRqdXN0IGFjY29yZGluZyB0byB5b3VyIHN0eWxpbmcgbmVlZHMgKi9cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,gBAAgB;EAM3BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAL/B,eAAU,GAAG,KAAK;IAClB,oBAAe,GAAG,KAAK;IACvB,SAAI,GAAW,EAAE;IAIf,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACD,WAAW,CAACE,WAAW,CAACC,SAAS,CAACC,IAAI,IAAG;MACpE,IAAI,CAACC,eAAe,GAAG,CAAC,CAACD,IAAI;MAC7B,IAAI,CAACE,IAAI,GAAGF,IAAI,GAAGA,IAAI,CAACG,KAAK,GAAG,EAAE,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ;;EAEAC,WAAW;IACT,IAAI,CAACP,gBAAgB,CAACQ,WAAW,EAAE;EACrC;EAEAC,QAAQ;IACN,IAAI,CAACC,UAAU,GAAG,KAAK;EACzB;EAEAC,MAAM;IACJ,IAAI,CAACD,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;EACpC;EAEAE,MAAM;IACJ,IAAIC,MAAM,CAACC,OAAO,CAAC,mCAAmC,CAAC,EAAE;MACvD,IAAI,CAACf,WAAW,CAACa,MAAM,EAAE;MACzB;;EAEJ;;;AA9BWf,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;QAAhBA,gBAAgB;EAAAkB;EAAAC;EAAAC;EAAAC;IAAA;MCT7BC,mBACA","names":["NavMenuComponent","constructor","authService","authSubscription","currentUser","subscribe","user","isAuthenticated","name","email","ngOnDestroy","unsubscribe","collapse","isExpanded","toggle","logout","window","confirm","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/nav-menu/nav-menu.component.ts","/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/nav-menu/nav-menu.component.html"],"sourcesContent":["import {Component, OnDestroy} from '@angular/core';\nimport { AuthService } from '../Authentication/auth.service';\nimport {Subscription} from \"rxjs\";\n\n@Component({\n  selector: 'app-nav-menu',\n  templateUrl: './nav-menu.component.html',\n  styleUrls: ['./nav-menu.component.css']\n})\nexport class NavMenuComponent implements OnDestroy {\n  isExpanded = false;\n  isAuthenticated = false;\n  name: string = '';\n  private authSubscription: Subscription;\n\n  constructor(private authService: AuthService) {\n    this.authSubscription = this.authService.currentUser.subscribe(user => {\n      this.isAuthenticated = !!user;\n      this.name = user ? user.email : ''; // Assuming the email is the username\n    });\n  }\n\n  ngOnDestroy() {\n    this.authSubscription.unsubscribe();\n  }\n\n  collapse() {\n    this.isExpanded = false;\n  }\n\n  toggle() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  logout() {\n    if (window.confirm('Are you sure you want to log out?')) {\n      this.authService.logout();\n      // Additional logic after logging out if necessary\n    }\n  }\n}\n","c\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}