{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Authentication/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction RegisterComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nfunction RegisterComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.successMessage);\n  }\n}\nexport class RegisterComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.email = '';\n    this.password = '';\n    this.confirmPassword = '';\n    this.errorMessage = '';\n    this.successMessage = '';\n    this.isLoading = false;\n  }\n  ngOnInit() {}\n  register() {\n    // Reset error and success messages\n    this.errorMessage = '';\n    this.successMessage = '';\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n    // Additional validation can be added here (e.g., email format, password strength)\n    this.isLoading = true;\n    this.authService.register(this.email, this.password).subscribe(response => {\n      // Handle the successful registration\n      this.isLoading = false;\n      this.successMessage = 'Registration successful! Redirecting to login...';\n      // Redirect to login or other page after a delay\n      setTimeout(() => {\n        this.router.navigate(['/login']);\n      }, 2000);\n    }, error => {\n      // Handle errors, such as displaying a message\n      this.isLoading = false;\n      this.errorMessage = error.error.message || 'Registration failed';\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register\"]],\n  decls: 20,\n  vars: 5,\n  consts: [[1, \"register-container\"], [3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"name\", \"confirmPassword\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", 4, \"ngIf\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-success\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.register();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Email:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 4);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.email = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\", 2)(9, \"label\", 5);\n      i0.ɵɵtext(10, \"Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.password = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\", 2)(13, \"label\", 7);\n      i0.ɵɵtext(14, \"Confirm Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function RegisterComponent_Template_input_ngModelChange_15_listener($event) {\n        return ctx.confirmPassword = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"button\", 9);\n      i0.ɵɵtext(17, \"Register\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(18, RegisterComponent_div_18_Template, 2, 1, \"div\", 10);\n      i0.ɵɵtemplate(19, RegisterComponent_div_19_Template, 2, 1, \"div\", 11);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.email);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.password);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.confirmPassword);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.successMessage);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"mappings":";;;;;;;IAkBEA,+BAAqD;IAAAA,YAAkB;IAAAA,iBAAM;;;;IAAxBA,eAAkB;IAAlBA,yCAAkB;;;;;IACvEA,+BAAwD;IAAAA,YAAoB;IAAAA,iBAAM;;;;IAA1BA,eAAoB;IAApBA,2CAAoB;;;ACX9E,OAAM,MAAOC,iBAAiB;EAQ5BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;IAP5D,UAAK,GAAW,EAAE;IAClB,aAAQ,GAAW,EAAE;IACrB,oBAAe,GAAW,EAAE;IAC5B,iBAAY,GAAW,EAAE;IACzB,mBAAc,GAAW,EAAE;IAC3B,cAAS,GAAY,KAAK;EAE8C;EAExEC,QAAQ,IACR;EAEAC,QAAQ;IACN;IACA,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACC,cAAc,GAAG,EAAE;IAExB,IAAI,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACC,eAAe,EAAE;MAC1C,IAAI,CAACH,YAAY,GAAG,wBAAwB;MAC5C;;IAGF;IAEA,IAAI,CAACI,SAAS,GAAG,IAAI;IACrB,IAAI,CAACR,WAAW,CAACG,QAAQ,CAAC,IAAI,CAACM,KAAK,EAAE,IAAI,CAACH,QAAQ,CAAC,CAACI,SAAS,CAC5DC,QAAQ,IAAG;MACT;MACA,IAAI,CAACH,SAAS,GAAG,KAAK;MACtB,IAAI,CAACH,cAAc,GAAG,kDAAkD;MAExE;MACAO,UAAU,CAAC,MAAK;QACd,IAAI,CAACX,MAAM,CAACY,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC,EAAE,IAAI,CAAC;IACV,CAAC,EACDC,KAAK,IAAG;MACN;MACA,IAAI,CAACN,SAAS,GAAG,KAAK;MACtB,IAAI,CAACJ,YAAY,GAAGU,KAAK,CAACA,KAAK,CAACC,OAAO,IAAI,qBAAqB;IAClE,CAAC,CACF;EACH;;AA3CWjB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAkB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDP9BvB,8BAAgC;MAC1BA,wBAAQ;MAAAA,iBAAK;MACjBA,+BAA8B;MAAxBA;QAAA,OAAYwB,cAAU;MAAA,EAAC;MAC3BxB,8BAAwB;MACHA,sBAAM;MAAAA,iBAAQ;MACjCA,gCAAyE;MAA1CA;QAAA;MAAA,EAAmB;MAAlDA,iBAAyE;MAE3EA,8BAAwB;MACAA,0BAAS;MAAAA,iBAAQ;MACvCA,iCAAqF;MAAhDA;QAAA;MAAA,EAAsB;MAA3DA,iBAAqF;MAEvFA,+BAAwB;MACOA,kCAAiB;MAAAA,iBAAQ;MACtDA,iCAA0G;MAA9DA;QAAA;MAAA,EAA6B;MAAzEA,iBAA0G;MAE5GA,kCAA8C;MAAAA,yBAAQ;MAAAA,iBAAS;MAEjEA,qEAA6E;MAC7EA,qEAAkF;MACpFA,iBAAM;;;MAd+BA,eAAmB;MAAnBA,mCAAmB;MAIbA,eAAsB;MAAtBA,sCAAsB;MAIfA,eAA6B;MAA7BA,6CAA6B;MAIvEA,eAAkB;MAAlBA,uCAAkB;MAClBA,eAAoB;MAApBA,yCAAoB","names":["i0","RegisterComponent","constructor","authService","router","ngOnInit","register","errorMessage","successMessage","password","confirmPassword","isLoading","email","subscribe","response","setTimeout","navigate","error","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/Authentication/register.component.html","/Users/zakarianurgutale/Projects/HomeToGo2/HomeToGo2/ClientApp/src/app/Authentication/register.component.ts"],"sourcesContent":["<!-- register.component.html -->\n<div class=\"register-container\">\n  <h2>Register</h2>\n  <form (ngSubmit)=\"register()\">\n    <div class=\"form-group\">\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" [(ngModel)]=\"email\" name=\"email\" required>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" [(ngModel)]=\"password\" name=\"password\" required>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"confirmPassword\">Confirm Password:</label>\n      <input type=\"password\" id=\"confirmPassword\" [(ngModel)]=\"confirmPassword\" name=\"confirmPassword\" required>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n  </form>\n  <div *ngIf=\"errorMessage\" class=\"alert alert-danger\">{{ errorMessage }}</div>\n  <div *ngIf=\"successMessage\" class=\"alert alert-success\">{{ successMessage }}</div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../Authentication/auth.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit {\n  email: string = '';\n  password: string = '';\n  confirmPassword: string = '';\n  errorMessage: string = '';\n  successMessage: string = '';\n  isLoading: boolean = false;\n\n  constructor(private authService: AuthService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  register() {\n    // Reset error and success messages\n    this.errorMessage = '';\n    this.successMessage = '';\n\n    if (this.password !== this.confirmPassword) {\n      this.errorMessage = 'Passwords do not match';\n      return;\n    }\n\n    // Additional validation can be added here (e.g., email format, password strength)\n\n    this.isLoading = true;\n    this.authService.register(this.email, this.password).subscribe(\n      response => {\n        // Handle the successful registration\n        this.isLoading = false;\n        this.successMessage = 'Registration successful! Redirecting to login...';\n\n        // Redirect to login or other page after a delay\n        setTimeout(() => {\n          this.router.navigate(['/login']);\n        }, 2000);\n      },\n      error => {\n        // Handle errors, such as displaying a message\n        this.isLoading = false;\n        this.errorMessage = error.error.message || 'Registration failed';\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}