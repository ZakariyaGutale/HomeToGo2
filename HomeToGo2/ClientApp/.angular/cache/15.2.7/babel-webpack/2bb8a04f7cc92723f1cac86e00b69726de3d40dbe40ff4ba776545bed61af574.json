{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ListingService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'api/listing/';\n  }\n  getListings() {\n    // Added error handling to the getListings call\n    return this.http.get(this.baseUrl).pipe(catchError(this.handleError));\n  }\n  createListing(newListing) {\n    // Added error handling to the createListing call\n    const createUrl = `${this.baseUrl}create`;\n    return this.http.post(createUrl, newListing).pipe(catchError(this.handleError));\n  }\n  getListingById(listingId) {\n    // Added error handling to the getListingById call\n    const url = `${this.baseUrl}${listingId}`;\n    return this.http.get(url).pipe(catchError(this.handleError));\n  }\n  updateListing(listingId, newListing) {\n    // Added error handling to the updateListing call\n    const url = `${this.baseUrl}update/${listingId}`;\n    return this.http.put(url, newListing).pipe(catchError(this.handleError));\n  }\n  deleteListing(listingId) {\n    // Added error handling to the deleteListing call\n    const url = `${this.baseUrl}delete/${listingId}`;\n    return this.http.delete(url).pipe(catchError(this.handleError));\n  }\n  // Error handling method\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n    // Returning an observable with a user-facing error message.\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nListingService.ɵfac = function ListingService_Factory(t) {\n  return new (t || ListingService)(i0.ɵɵinject(i1.HttpClient));\n};\nListingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ListingService,\n  factory: ListingService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAM3C,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,cAAc;EAEQ;EAExCC,WAAW;IACT;IACA,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAa,IAAI,CAACC,OAAO,CAAC,CAACC,IAAI,CACjDP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACH;EAEAC,aAAa,CAACC,UAAoB;IAChC;IACA,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACL,OAAO,QAAQ;IACzC,OAAO,IAAI,CAACH,IAAI,CAACS,IAAI,CAAMD,SAAS,EAAED,UAAU,CAAC,CAACH,IAAI,CACpDP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACH;EAEAK,cAAc,CAACC,SAAiB;IAC9B;IACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,GAAGQ,SAAS,EAAE;IACzC,OAAO,IAAI,CAACX,IAAI,CAACE,GAAG,CAAWU,GAAG,CAAC,CAACR,IAAI,CACtCP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACH;EAEAQ,aAAa,CAACF,SAAiB,EAAEJ,UAAoB;IACnD;IACA,MAAMK,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,UAAUQ,SAAS,EAAE;IAChD,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAMF,GAAG,EAAEL,UAAU,CAAC,CAACH,IAAI,CAC7CP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACH;EAEAU,aAAa,CAACJ,SAAiB;IAC7B;IACA,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,UAAUQ,SAAS,EAAE;IAChD,OAAO,IAAI,CAACX,IAAI,CAACgB,MAAM,CAACJ,GAAG,CAAC,CAACR,IAAI,CAC/BP,UAAU,CAAC,IAAI,CAACQ,WAAW,CAAC,CAC7B;EACH;EAEA;EACQA,WAAW,CAACY,KAAwB;IAC1C,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACrC;MACAC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAACG,OAAO,CAAC;KACzD,MAAM;MACL;MACAD,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACI,MAAM,IAAI,GACzC,aAAaJ,KAAK,CAACA,KAAK,EAAE,CAAC;;IAE/B;IACA,OAAOrB,UAAU,CACf,iDAAiD,CAAC;EACtD;;AA1DWE,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAwB,SAAdxB,cAAc;EAAAyB,YAFb;AAAM","names":["throwError","catchError","ListingService","constructor","http","getListings","get","baseUrl","pipe","handleError","createListing","newListing","createUrl","post","getListingById","listingId","url","updateListing","put","deleteListing","delete","error","ErrorEvent","console","message","status","factory","providedIn"],"sourceRoot":"","sources":["/Users/ibrahim/Projects/HomeToGo2/HomeToGo2/HomeToGo2/ClientApp/src/app/listings/listings.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { IListing } from './listing';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ListingService {\n  private baseUrl = 'api/listing/';\n\n  constructor(private http: HttpClient) { }\n\n  getListings(): Observable<IListing[]> {\n    // Added error handling to the getListings call\n    return this.http.get<IListing[]>(this.baseUrl).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  createListing(newListing: IListing): Observable<any> {\n    // Added error handling to the createListing call\n    const createUrl = `${this.baseUrl}create`;\n    return this.http.post<any>(createUrl, newListing).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getListingById(listingId: number): Observable<IListing> {\n    // Added error handling to the getListingById call\n    const url = `${this.baseUrl}${listingId}`;\n    return this.http.get<IListing>(url).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  updateListing(listingId: number, newListing: IListing): Observable<any> {\n    // Added error handling to the updateListing call\n    const url = `${this.baseUrl}update/${listingId}`;\n    return this.http.put<any>(url, newListing).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  deleteListing(listingId: number): Observable<any> {\n    // Added error handling to the deleteListing call\n    const url = `${this.baseUrl}delete/${listingId}`;\n    return this.http.delete(url).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  // Error handling method\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Returning an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}